import random
import copy
import numpy as np

def binary_tournament(trial_runner, trial, states):
    """Selects a candidate to replace the current trial. 
    
    Parameters
    ----------
    trial_runner : ray.tune.trial_runner.TrialRunner
        The trial runner for the PBT run.
    trial : ray.tune.trial.Trial
        The trial to be replaced.
    states : dict from Trial to TrialState
        A dictionary mapping Trial objects to their 
        current training state

    Returns
    -------
    ray.tune.trial.Trial
        The trial selected to replace the `trial` 
        passed in as an argument. `None` if the trial
        is not replaced.
    """

    all_trials = trial_runner.get_trials()
    # Get all other trials that don't have NaN scores
    all_competitors = [t for t in all_trials \
        if t != trial and not np.isnan(states[t].score)]
    # Choose a random competitor
    competitor = random.choice(all_competitors)
    trial_state, competitor_state = states[trial], states[competitor]
    if np.isnan(trial_state.score):
        # Replace if this trial's score is NaN
        replace=True
    else:
        # Replace if this trial's score is less than its competitor
        replace = competitor_state.score > trial_state.score
    return competitor if replace else None
